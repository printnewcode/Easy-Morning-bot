from datetime import datetime, timedelta
from telebot.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    Message,
)

from bot import bot
from bot.models import User, Goods
from bot.texts import SUBSCRIBE_TEXT, NUMBER, SUBSCRIPTION_TEXT, FIRST_DAY
from bot.keyboards import START_BUTTONS, OTHER_BUTTONS, back, BACK_BUTTON, SUBSCRIPTION_BUTTONS, LINK_MENU_BUTTONS
from bot.utils import get_User, access_time
from bot.static.goods import goods, other_goods
from Transition.settings import LINK, CHAT_ID


def start(message: Message):
    user_id = message.from_user.id
    user = User.objects.filter(telegram_id=user_id)

    bot.send_message(
        text=SUBSCRIBE_TEXT,
        chat_id=user_id,
        reply_markup=START_BUTTONS,
    )
    
    if not user.exists():
        user = User.objects.create(
            telegram_id=user_id,
            access_time_end=(datetime.now() + timedelta(days=1)),
            username=message.from_user.username,
        )
        user.save()
        bot.send_message(
            text=f"{FIRST_DAY}\n\nüéÅ  –ø–æ–ø—Ä–æ–±—É–π: {LINK}",
            chat_id=user_id,
        )
    else:
        user.first().username = message.from_user.username
        user.first().save()

def menu_buttons(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    _, data = call.data.split("_")
    if data == "subscription":
        bot.edit_message_text(
            message_id=call.message.id,
            text=SUBSCRIPTION_TEXT,
            chat_id=call.message.chat.id,
            reply_markup=SUBSCRIPTION_BUTTONS
        )
    if data == "link":
        bot.edit_message_text(
            message_id=call.message.id,
            text=FIRST_DAY,
            chat_id=call.message.chat.id,
            reply_markup=LINK_MENU_BUTTONS
        )

def pay_handler(call: CallbackQuery):
    _, data = call.data.split("_")
    if data == "7" or data == "14" or data == "30":
        
        price = goods.get(data)
        if data == "30":
            try:
                if get_User.get_user(id=call.message.chat.id).is_monthly:
                    price = price[1]
            except:
                price = price[0]
        msg = bot.edit_message_text(
            text=f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ {data} –¥–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {price} —Ä—É–±.\n–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü –Ω–∞ –Ω–æ–º–µ—Ä {NUMBER}\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/—á–µ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—é–¥–∞, —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!",
            message_id=call.message.id,
            chat_id=call.message.chat.id,
            reply_markup=BACK_BUTTON,
        )
        
        bot.register_next_step_handler(msg, pay_sbp_handler, data)

    if data == "vip":
        price = goods.get("vip")
        msg = bot.edit_message_text(
            text=f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP-–¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {price} —Ä—É–±.\n–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü –Ω–∞ –Ω–æ–º–µ—Ä {NUMBER}\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/—á–µ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—é–¥–∞, —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!",
            message_id=call.message.id,
            chat_id=call.message.chat.id,
            reply_markup=BACK_BUTTON,
        )
        
        bot.register_next_step_handler(msg, pay_sbp_handler, data)

    if data == "other":
        
        bot.edit_message_text(
            text="–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –º–æ–∂–µ–º –≤–∞–º –æ–∫–∞–∑–∞—Ç—å",
            message_id=call.message.id,
            chat_id=call.message.chat.id,
            reply_markup=OTHER_BUTTONS,
        )
        


def pay_sbp_handler(message: Message, data: str):
    bot.send_message(
        text="–ß–µ–∫ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        chat_id=message.chat.id
    )
    admin = User.objects.filter(is_admin=True).first()

    ADMIN_PAY = InlineKeyboardMarkup()
    pay_accept = InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin-pay_accept-{message.chat.id}-{data}")
    pay_decline = InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"admin-pay_decline-{message.chat.id}-{data}")
    ADMIN_PAY.add(pay_accept, pay_decline)

    data = data + " –¥–Ω–µ–π" if data == "7" or data == "14" or data == "30" else "VIP-–¥–æ—Å—Ç—É–ø"
    bot.forward_message(
        chat_id=int(admin.telegram_id),
        message_id=message.id,
        from_chat_id=message.chat.id
    )

    text=f"–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ–ø–ª–∞—Ç–∏–ª {data}. –í–æ—Ç —á–µ–∫!" 
    bot.send_message(
        text=text,
        chat_id=int(admin.telegram_id),
        reply_markup=ADMIN_PAY
    )
    


def other_callback_handler(call: CallbackQuery):
    _, goods = call.data.split("_")
    good = other_goods.get(goods)
    bot.send_message(
        text="–û–∂–∏–¥–∞–π—Ç–µ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è",
        chat_id=call.message.chat.id,
    )
    admin = User.objects.filter(is_admin=True).first()

    bot.send_message(
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª **{good}**. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º!",
        chat_id=int(admin.telegram_id),
        parse_mode="Markdown"
    )


def admin_pay_handler(call: CallbackQuery):
    _, answer = call.data.split("_")
    answer, id, days = answer.split("-")
    user = get_User.get_user(id)
    admin = User.objects.filter(is_admin=True).first()
    is_active = access_time.is_active(user)
    if answer == "accept":
        user.is_paid = True
        if days == "7" or days == "14" or days == "30":
            if days == "30":
                user.is_monthly = True
            else:
                user.is_monthly = False
            if not is_active:
                user.access_time_end = (datetime.now().replace(tzinfo=None) + timedelta(days=int(days)))
            else:
                user.access_time_end += timedelta(days=int(days))
        else:
            user.access_time_end += timedelta(days=30)
            user.is_vip = True
            bot.send_message(
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.message.from_user.username} –æ–ø–ª–∞—Ç–∏–ª Ultimate. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º! (–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–æ–±—Ä–µ—Ç—à–∏—Ö –º–æ–∂–Ω–æ –≤ /admin)",
                chat_id=int(admin.telegram_id)
            )
        user.save()
        try:
            unban_user(user)
        except:
            pass
        bot.send_message(
            text=f"–ß–µ–∫ –æ–¥–æ–±—Ä–µ–Ω!",
            chat_id=int(user.telegram_id),
        )
    else:
        bot.send_message(
            text="–í–∞—à —á–µ–∫ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑",
            chat_id=int(user.telegram_id),
        )
    bot.delete_message(message_id=call.message.id, chat_id=call.message.chat.id)
    bot.delete_message(message_id=call.message.id-1, chat_id=call.message.chat.id)

def back_button(call: CallbackQuery):
    bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
    bot.edit_message_text(
        text=SUBSCRIBE_TEXT,
        message_id=call.message.id,
        chat_id=call.message.chat.id,
        reply_markup=START_BUTTONS,
    )


def unban_user(user):
    bot.unban_chat_member(chat_id=CHAT_ID, user_id=user.telegram_id)
